#!/usr/bin/python3
import random
import subprocess
import sys
import atexit
import time
import re
import selectors
import os
import json

port = -1

if len(sys.argv)>1 and sys.argv[1] == "--help":
    # Used by openwebrx to test availablility. Could be  more informative output...
    print ("It works.")
    exit(0)

def launch_decoder(proclist):
    global sel
    global logreader
    sel = selectors.DefaultSelector()

    # Launch sondemod wth random UDP port, and output to CSV
    # For now, we use sondemod -v output (which is more detailed and more practical for interactive use)
    # print("Starting sondemod")
    try:
        os.mkdir("/tmp/dxlaprs/"); # just in case it does not exist
    except:
        pass
    os.chdir("/tmp/dxlaprs/"); # for now, same tmp directory for all users. should be *good*
    random.seed(None)
    port = random.randrange(50000,60000)
    logfile = "/tmp/dxlaprs/logfile-{port}".format(port=port)
    sondemodcmd = ["sondemod", "-C", logfile, "-d", "-F", "-I", "OWEBRX",
                   "-S", "/usr/share/dxlaprs/aprsmap_common/osm/", "-x", "/tmp/e.txt",
                   "-o", "{port}".format(port=port), "-p", "2", "-v"]
    sondemod = subprocess.Popen(sondemodcmd, stdout=subprocess.PIPE)
    proclist["sondemod"] = sondemod

    logproc = subprocess.Popen(["tail", "--retry", "-f", logfile], stdout=subprocess.PIPE);
    logreader = logproc.stdout
    proclist["logreader"] = logproc

    # print("Starting sondeudp")
    # Read audio data from stdin, forward to sondeudp 
    sondeudpcmd = ["sondeudp", "-f", "48000", "-o", "/dev/stdin", "-c", "1", "-u", "127.0.0.1:%d" % port ]
    sondeudp = subprocess.Popen(sondeudpcmd, stdin=sys.stdin, stdout=subprocess.DEVNULL)
    proclist["sondeudp"] = sondeudp

    sel.register(sondemod.stdout, selectors.EVENT_READ, "raw")
    sel.register(logreader, selectors.EVENT_READ, "csv")


@atexit.register
def stopprocs():
    if proclist["sondemod"]:
        try: 
            proclist["sondemod"].terminate()
        except:
            pass
    if proclist["sondeudp"]:
        try: 
            proclist["sondeudp"].terminate()
        except:
            pass
    if proclist["logreader"]:
        try: 
            proclist["logreader"].terminate()
        except:
            pass
    try:
        os.remove("/tmp/dxlaprs/logfile-{port}")
    except:
        pass


proclist = { "sondemod":  None, "sondeudp": None, "logreader": None }
header = None
launch_decoder(proclist)
while True:
    ok = 0
    try:
        smp = proclist["sondemod"].poll()
        if smp:
            # sondemod has terminated; this may happen at startup if random UDP port is not available
            pass
        else:
            ok+=1
    except:
        pass
    try:
        sup = proclist["sondeudp"].poll()
        if sup:
            # sondeudp has terminated; this should never happen
            pass
        else:
            ok+=1
    except:
        pass

    if ok==2:
        # Everything is still up and running
        try: 
            events = sel.select()
            for key, mask in events:
                if key.data == "csv":
                    line = logreader.readline().decode("latin1")
                    if header == None:
                        header = line.split(",")
                    else:
                        data = line.split(",")
                        kv = dict(zip(header,data))    
                        print(json.dumps(kv), flush=True)
                else:
                    line = proclist["sondemod"].stdout.readline().decode("latin1")
                    # eliminate output from sondeaprs.mod ("^\d+\.\d+hPa")
                    if re.match("\s+\d+\.\d+hPa", line) or re.match(".*UDP:127.0.0.1", line) or re.match(".*OWEBRX>APLWS2", line):
                        pass
                        # print("match: "+line, flush=True)
                    else:
                        print(line, flush=True)
                    #time.sleep(1)
                    continue
        except:
            e = sys.exc_info()[0]
            print( "<p>Error: %s</p>" % e )
            ok = 0

    if ok != 2:
        # Something went wrong, try again
        stopprocs()
        time.sleep(1)
        launch_decoder(proclist)

# Never....
print("Closing down...")

